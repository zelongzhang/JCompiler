#pragma once
#include <string>

// Class representing a J-- token generated by the lexer
// This class was referenced from Shankar's pure C++ example.
class Token
{
    public:

    // Name or type of the token
    enum Name{
        //Singletons
        T_ADD = 0,
        T_SUB = 1,
        T_MULT,
        T_MOD,
        T_LBRACKET,
        T_RBRACKET,
        T_LBRACE,
        T_RBRACE,
        T_SEMICOL,
        T_COMMA,
        // May be pairs
        T_NOT,
        T_NOTEQ,
        T_EQ,
        T_EQEQ,
        T_LT,
        T_LTE,
        T_GT,
        T_GTE,
        T_DIV,
        // Must be pairs
        T_AND,
        T_OR,
        // Reserved keywords
        T_TRUE,
        T_FALSE,
        T_BOOL,
        T_INT,
        T_VOID,
        T_IF,
        T_ELSE,
        T_WHILE,
        T_BREAK,
        T_RETURN,
        // EOF , identifiers and values
        T_EOF,
        T_ID,
        T_NUMBER,
        T_STRING
    };

    // Constructor, name and line_num should not change after initialization
    // Default value of "" represents tokens without lexemes
    Token(Name name, int line_num, std::string lexeme = ""); 

    // Default destructor
    ~Token() = default;

    // Getters for protected members
    Name getName();
    void setName(Name name);
    std::string getLexeme();
    void setLexeme(std::string lexeme);
    int getLine();
    void setLine(int line);

    protected:

    Name name;
    std::string lexeme; // "value" of the token (e.g "100" for a number token)
    int line_number; // line number in the input file that the token was found in
};